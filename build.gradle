import java.time.Duration

plugins {
    id 'java'
//    id 'war'
    id 'java-library'
    id 'maven-publish'
    id 'org.springframework.boot' version '3.5.1'
    id 'io.spring.dependency-management' version '1.1.7'

    id 'io.freefair.lombok' version '8.12.2.1'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'org.gradle.test-retry' version '1.6.2'
}

group = 'com.prosilion.afterimage'
version = '0.2.2'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

publishing {
    publications {
        mavenJar(MavenPublication) {
            from components.java
//            groupId 'com.prosilion.afterimage'
        }
    }
//    publications {
//        mavenWar(MavenPublication) {
//            from components.web
//            groupId 'com.prosilion.afterimage'
//        }
//    }
}

dependencies {
    def springBootVersion = '3.5.1'
    def nostrJavaCoreVersion = '1.0.0'
    def superconductorStarterVersion  = '1.16.1'
    def subdivisionsVersion = '1.3.0'
    def apacheCommonsLang3 = '3.17.0'
    def jacksonModuleAfterburner = '2.18.3'
    def googleGuava = '33.2.1-jre'
    def awaitility = '4.2.0'
    def testcontainers = '1.20.6'

    implementation 'org.springframework.boot:spring-boot-starter:' + springBootVersion
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'com.prosilion:nostr-java-core:' + nostrJavaCoreVersion
    implementation 'com.prosilion.superconductor:superconductor-spring-boot-starter-redis:' + superconductorStarterVersion

    runtimeOnly('org.springframework.boot:spring-boot-starter-data-redis-reactive')
    annotationProcessor('org.springframework.boot:spring-boot-starter-data-redis-reactive')

    def springBootEmbeddedRedis = '1.0.1'
    testImplementation('io.github.tobi-laa:spring-boot-embedded-redis:' + springBootEmbeddedRedis)
    testImplementation('io.projectreactor:reactor-test')
    
    implementation 'com.prosilion:subdivisions:' + subdivisionsVersion

    implementation 'org.apache.commons:commons-lang3:' + apacheCommonsLang3
    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner:' + jacksonModuleAfterburner
    implementation 'com.google.guava:guava:' + googleGuava
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

    implementation 'org.awaitility:awaitility:' + awaitility
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:testcontainers:' + testcontainers
    testImplementation 'org.testcontainers:junit-jupiter:' + testcontainers
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    systemProperty("spring.profiles.active", "test")
    useJUnitPlatform()
}

test {
    filter {
        excludeTestsMatching("*IT");
    }
    testLogging {
        showStandardStreams = true
    }
}

tasks.register('integrationTest', Test) {
    description = 'integration tests.'
    group = 'verification'
    systemProperty("spring.profiles.active", "test")
    useJUnitPlatform()
    filter {
        excludeTestsMatching("*Test");
        includeTestsMatching("*IT");
    }
}

integrationTest {
    retry {
        failOnPassedAfterRetry = false
        maxRetries = 1
    }
    testLogging {
        showStandardStreams = true
    }
//    setTimeout(Duration.ofSeconds(6000))
}

check.dependsOn integrationTest

tasks.bootJar {
    enabled = false
}

tasks.named("jar") {
    archiveClassifier = ''
}

//tasks.bootWar {
//    enabled = false
//}
//
//tasks.named("war") {
//    archiveClassifier = ''
//}

tasks.register("bootRunLocalWs") {
    group = "application"
    description = "afterimage STANDARD MODE: local_ws"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "local_ws")
        }
        getServerPort()
    }
    finalizedBy("bootRun")
}

void getServerPort() {
    if (!project.hasProperty("server.port"))
        throw new GradleException('missing server.port')

    if (!project.hasProperty("afterimage.relay.url"))
        throw new GradleException('missing afterimage.relay.url')
}

bootRun {
    args += ["--server.port=${project.properties["server.port"]}"]
    args += ["--afterimage.relay.url=${project.properties["afterimage.relay.url"]}"]
}

tasks.register("bootRunLocalWss") {
    group = "application"
    description = "afterimage SECURE MODE: local_wss"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "local_wss")
        }
    }
    finalizedBy("bootRun")
}
